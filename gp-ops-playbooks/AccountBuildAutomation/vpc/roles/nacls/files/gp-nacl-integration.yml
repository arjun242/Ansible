AWSTemplateFormatVersion: '2010-09-09'
Description: CF Template to create NACL entries for gpnaclIntegration
Parameters: 

  UAI:
    Type: String
    Description: The UAI of the application being managed. UAI starting sequence. MUST be in lowercase.
    ConstraintDescription: The UAI must be valid, but specified as uai in lower case followed by 7 digits
    AllowedPattern: ^uai[0-9]*$
    MinLength: !!int 10
    MaxLength: !!int 10

  {% if extSubnetCIDR!= "NA" -%}
  EXTSubnetCIDR:
    Description: Complete External subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range
  {% endif %}

  IGRSubnetCIDR:
    Description: Complete Integration subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range

Resources:
  gpnaclIntegration:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
      - Key: Name
        Value: {{prefix}}gp-nacl-integration
      - Key: app
        Value: gp-cloud-common
      - Key: uai
        Value: !Ref UAI
      VpcId: !ImportValue {{prefix}}vpcid

  # # Deny all inbound requests from Ext Subnet
  {% if extSubnetCIDR!= "NA" -%}
  Ingress100:
    Properties:
      CidrBlock: !Ref EXTSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration      
      Protocol: '-1'
      RuleAction: deny
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  {% endif %}

  # Allow all HTTP connections from 10.0.0.0/8
  Ingress1000:
    Properties:
      CidrBlock: 10.0.0.0/8
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1000'
    Type: AWS::EC2::NetworkAclEntry

  # Allow all HTTPS connections from 10.0.0.0/8
  Ingress1001:
    Properties:
      CidrBlock: 10.0.0.0/8
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1001'
    Type: AWS::EC2::NetworkAclEntry

  # Allow all HTTP connections from 3.0.0.0/8
  Ingress1002:
    Properties:
      CidrBlock: 3.0.0.0/8
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1002'
    Type: AWS::EC2::NetworkAclEntry

  # Allow all HTTPS connections from 3.0.0.0/8
  Ingress1003:
    Properties:
      CidrBlock: 3.0.0.0/8
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1003'
    Type: AWS::EC2::NetworkAclEntry
  # Allow inbound traffic from FSSFED for ALB OIDC auth
  Ingress1100:
    Properties:
      CidrBlock: 8.22.209.141/32
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1100'
    Type: AWS::EC2::NetworkAclEntry
  # Allow inbound traffic from FSSFED for ALB OIDC auth
  Ingress1101:
    Properties:
      CidrBlock: 8.23.90.173/32
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1101'
    Type: AWS::EC2::NetworkAclEntry
  # Allow inbound traffic from FSSFED for ALB OIDC auth
  Ingress1102:
    Properties:
      CidrBlock: 12.155.41.141/32
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1102'
    Type: AWS::EC2::NetworkAclEntry
  # Allow inbound traffic from FSSFED for ALB OIDC auth
  Ingress1103:
    Properties:
      CidrBlock: 12.229.99.173/32
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1103'
    Type: AWS::EC2::NetworkAclEntry
  # ephemeral ports allow responses to requests
  Ingress1200:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '32768'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1200'
    Type: AWS::EC2::NetworkAclEntry
  # ephemeral ports allow responses to requests
  Ingress1210:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '32768'
        To: '65535'
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '1210'
    Type: AWS::EC2::NetworkAclEntry

  # Allow IGR subnets across AZs to communicate 
  Ingress1300:
    Properties:
      CidrBlock: !Ref IGRSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration      
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '1300'
    Type: AWS::EC2::NetworkAclEntry

  #Centralized Bastion SSH Access
  Ingress1551:
    Properties:
      CidrBlock: 10.157.136.0/25
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1551
    Type: AWS::EC2::NetworkAclEntry
  #Centralized Bastion RDP Access
  Ingress1552:
    Properties:
      CidrBlock: 10.157.136.0/25
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: 3389
        To: 3389
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1552
    Type: AWS::EC2::NetworkAclEntry
  
########## Out Bound Rules #############    

  # Allow all 80 traffic to leave 
  Egress1010:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1010'
    Type: AWS::EC2::NetworkAclEntry

    # Ansible tower connectivity from gp-ops
  Ingress1553:
    Properties:
      CidrBlock: 10.157.140.0/25
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration      
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1553
    Type: AWS::EC2::NetworkAclEntry
  Ingress1554:
    Properties:
      CidrBlock: 10.157.140.0/25
      Egress: false
      NetworkAclId:
        Ref: gpnaclIntegration      
      PortRange:
        From: 5986
        To: 5986
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1554
    Type: AWS::EC2::NetworkAclEntry

  # Allow all 443 traffic to leave 
  Egress1011:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1011'
    Type: AWS::EC2::NetworkAclEntry

  # SMTP Mail relay
  Egress1040:
    Properties:
      CidrBlock: 3.159.213.48/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '25'
        To: '25'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1040'
    Type: AWS::EC2::NetworkAclEntry

  # SMTP Mail relay
  Egress1041:
    Properties:
      CidrBlock: 3.159.17.48/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '25'
        To: '25'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1041'
    Type: AWS::EC2::NetworkAclEntry

  # SMTP Mail relay
  Egress1042:
    Properties:
      CidrBlock: 10.38.9.235/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '25'
        To: '25'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1042'
    Type: AWS::EC2::NetworkAclEntry

  # ephemeral ports allow responses to requests
  Egress1120:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1120'
    Type: AWS::EC2::NetworkAclEntry

  # ephemeral ports allow responses to requests
  Egress1130:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '1130'
    Type: AWS::EC2::NetworkAclEntry
    
  # Allow IGR subnets across AZs to communicate.
  naclOutApplication1201:
    Properties:
      CidrBlock: !Ref IGRSubnetCIDR
      Egress: true
      NetworkAclId:
        Ref: gpnaclIntegration      
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '1201'
    Type: AWS::EC2::NetworkAclEntry

  #AD Domain Join Rules
  Egress1800:
    Properties: 
      CidrBlock: 10.93.58.179/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange: 
        From: 53
        To: 3269
      Protocol: 6
      RuleAction: allow 
      RuleNumber: 1800
    Type: AWS::EC2::NetworkAclEntry
  
  Egress1801:
    Properties: 
      CidrBlock: 10.93.58.179/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange: 
        From: 53
        To: 464
      Protocol: 17
      RuleAction: allow 
      RuleNumber: 1801
    Type: AWS::EC2::NetworkAclEntry
  
  Egress1802:
    Properties: 
      CidrBlock: 10.38.0.0/16
      Egress: true
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange: 
        From: 53
        To: 53
      Protocol: -1
      RuleAction: allow 
      RuleNumber: 1802
    Type: AWS::EC2::NetworkAclEntry   
  
  Egress1803:
    Properties: 
      CidrBlock: 10.38.9.237/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclIntegration
      PortRange: 
        From: 636
        To: 636
      Protocol: 6
      RuleAction: allow 
      RuleNumber: 1803
    Type: AWS::EC2::NetworkAclEntry 

Outputs:
  NaclIntegration:
    Description: Export NACL ID of Integration Subnet 
    Value:
      Ref: gpnaclIntegration
    Export: 
      Name: {{prefix}}igr-nacl