##### History
# date  - initials - Description
# {{ ansible_date_time.date }} Ansible commited file

AWSTemplateFormatVersion: '2010-09-09'
Description: CF Template to create NACL entries for gpnaclApplication
Parameters: 

  UAI:
    Type: String
    Description: The UAI of the application being managed. UAI starting sequence. MUST be in lowercase.
    ConstraintDescription: The UAI must be valid, but specified as uai in lower case followed by 7 digits
    AllowedPattern: ^uai[0-9]*$
    MinLength: !!int 10
    MaxLength: !!int 10
    Default: uai3026350

  APPSubnetCIDR:
    Description: Complete Application subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range
    Default: 10.0.0.0/8

  {% if dbSubnetCIDR!= "NA" -%}
  DBSubnetCIDR:
    Description: Complete Database subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range
    Default: 10.0.0.0/8
  {% endif %}

  {% if extSubnetCIDR!= "NA" -%}
  EXTSubnetCIDR:
    Description: Complete External subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range
  {% endif %}

Resources:
  gpnaclApplication:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
      - Key: Name
        Value: {{prefix}}gp-nacl-application
      - Key: app
        Value: gp-cloud-common
      - Key: uai
        Value: !Ref UAI
      VpcId: !ImportValue {{prefix}}vpcid

  # # Incude this if External subnet is present
  # # Deny all inbound requests from Ext Subnets Az1 and Az2
  {% if extSubnetCIDR != "NA" -%}
  Ingress100:
    Properties:
      CidrBlock: !Ref EXTSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication      
      Protocol: '-1'
      RuleAction: deny
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  {% endif %}

  #Web Traffic inbound 80
  Ingress1100:
    Properties:
      CidrBlock: 10.0.0.0/8
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1100
    Type: AWS::EC2::NetworkAclEntry
  #Web Traffic inbound 443 
  Ingress1150:
    Properties:
      CidrBlock: 10.0.0.0/8
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1150
    Type: AWS::EC2::NetworkAclEntry
  #Web Traffic inbound 3.x 80  
  Ingress1200:
    Properties:
      CidrBlock: 3.0.0.0/8
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1200
    Type: AWS::EC2::NetworkAclEntry
  #Web Traffic inbound 3.x 443   
  Ingress1250:
    Properties:
      CidrBlock: 3.0.0.0/8
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1250
    Type: AWS::EC2::NetworkAclEntry
  #FSSFED external IP ALB Authentication
  Ingress1400:
    Properties:
      CidrBlock: 8.22.209.141/32
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1400
    Type: AWS::EC2::NetworkAclEntry
  #FSSFED external IP ALB Authentication
  Ingress1420:
    Properties:
      CidrBlock: 8.23.90.173/32
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1420
    Type: AWS::EC2::NetworkAclEntry
  #FSSFED external IP ALB Authentication
  Ingress1440:
    Properties:
      CidrBlock: 12.155.41.141/32
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1440
    Type: AWS::EC2::NetworkAclEntry
  #FSSFED external IP ALB Authentication  
  Ingress1460:
    Properties:
      CidrBlock: 12.229.99.173/32
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1460
    Type: AWS::EC2::NetworkAclEntry
  #Ephemeral inbound TCP
  Ingress1500:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 32768
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1500
    Type: AWS::EC2::NetworkAclEntry
  #Ephemeral inbound UDP  
  Ingress1550:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 32768
        To: 65535
      Protocol: 17
      RuleAction: allow
      RuleNumber: 1550
    Type: AWS::EC2::NetworkAclEntry
  #Cross Zone Access Internal Subnets Az1 and Az2
  Ingress1201:
    Properties:
      CidrBlock: !Ref APPSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication      
      Protocol: -1
      RuleAction: allow
      RuleNumber: 1201
    Type: AWS::EC2::NetworkAclEntry
  #Centralized Bastion SSH Access
  Ingress1551:
    Properties:
      CidrBlock: 10.157.136.0/25
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1551
    Type: AWS::EC2::NetworkAclEntry
  #Centralized Bastion RDP Access
  Ingress1552:
    Properties:
      CidrBlock: 10.157.136.0/25
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 3389
        To: 3389
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1552
    Type: AWS::EC2::NetworkAclEntry
  # Ansible tower connectivity from gp-ops
  Ingress1553:
    Properties:
      CidrBlock: 10.157.140.0/25
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication      
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1553
    Type: AWS::EC2::NetworkAclEntry
  Ingress1554:
    Properties:
      CidrBlock: 10.157.140.0/25
      Egress: false
      NetworkAclId:
        Ref: gpnaclApplication      
      PortRange:
        From: 5986
        To: 5986
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1554
    Type: AWS::EC2::NetworkAclEntry
########## Out Bound Rules #############    

  # # Incude this if External subnet is present
  # # Deny all Outbound requests from Ext Subnets Az1 and Az2
  {% if extSubnetCIDR != "NA" -%}
  Egress100:
    Properties:
      CidrBlock: !Ref EXTSubnetCIDR
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication      
      Protocol: '-1'
      RuleAction: deny
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  {% endif %}

  #Outbound HTTP 
  Egress1100:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1100
    Type: AWS::EC2::NetworkAclEntry
  #Outbound HTTPS
  Egress1200:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1200
    Type: AWS::EC2::NetworkAclEntry
  #Mail Relay 3.159.17.48/32
  Egress1300:
    Properties:
      CidrBlock: 3.159.17.48/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 25
        To: 25
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1300
    Type: AWS::EC2::NetworkAclEntry
  #Mail Relay   3.159.213.48/32
  Egress1310:
    Properties:
      CidrBlock: 3.159.213.48/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 25
        To: 25
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1310
    Type: AWS::EC2::NetworkAclEntry
  #Mail Relay 3.159.19.78/32
  Egress1320:
    Properties:
      CidrBlock: 3.159.19.78/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 25
        To: 25
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1320
    Type: AWS::EC2::NetworkAclEntry
  #Mail Relay 3.159.212.78/32
  Egress1330:
    Properties:
      CidrBlock: 3.159.212.78/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 25
        To: 25
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1330
    Type: AWS::EC2::NetworkAclEntry
  #Mail Relay 10.38.9.235/32
  Egress1350:
    Properties:
      CidrBlock: 10.38.9.235/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 25
        To: 25
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1350
    Type: AWS::EC2::NetworkAclEntry
  # Cover for Myapp and VPN Users  
  # ephemeral ports allow responses to requests
  Egress1400:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1400
    Type: AWS::EC2::NetworkAclEntry
  # Cover for Myapp and VPN Users   
  # ephemeral ports allow responses to requests 
  Egress1410:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 1024
        To: 65535
      Protocol: 17
      RuleAction: allow
      RuleNumber: 1410
    Type: AWS::EC2::NetworkAclEntry
  #Cross Zone Access Application Subnets Az1 and Az2
  Egress1500:
    Properties:
      CidrBlock: !Ref APPSubnetCIDR
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication      
      Protocol: -1
      RuleAction: allow
      RuleNumber: 1500
    Type: AWS::EC2::NetworkAclEntry      
  # OutBound Connection to DB Subnets Az1 and Az2
  {% if dbSubnetCIDR != "NA" -%}
  Egress1600:
    Properties:
      CidrBlock: !Ref DBSubnetCIDR
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 1433
        To: 5432
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1600
    Type: AWS::EC2::NetworkAclEntry
  {% endif %}

  #LDAP 3.239.129.41/32
  Egress1700:
    Properties:
      CidrBlock: 3.239.129.41/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 389
        To: 389
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1700
    Type: AWS::EC2::NetworkAclEntry
  #LDAP 10.73.56.152/32
  Egress1710:
    Properties:
      CidrBlock: 10.38.9.237/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 389
        To: 389
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1710
    Type: AWS::EC2::NetworkAclEntry
  #LDAP 10.73.56.153/32
  Egress1720:
    Properties:
      CidrBlock: 10.73.56.153/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange:
        From: 389
        To: 389
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1720
    Type: AWS::EC2::NetworkAclEntry

  #AD Domain Join Rules
  Egress1800:
    Properties: 
      CidrBlock: 10.93.58.179/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange: 
        From: 53
        To: 3269
      Protocol: 6
      RuleAction: allow 
      RuleNumber: 1800
    Type: AWS::EC2::NetworkAclEntry
  
  Egress1801:
    Properties: 
      CidrBlock: 10.93.58.179/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange: 
        From: 53
        To: 464
      Protocol: 17
      RuleAction: allow 
      RuleNumber: 1801
    Type: AWS::EC2::NetworkAclEntry
  
  Egress1802:
    Properties: 
      CidrBlock: 10.38.0.0/16
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange: 
        From: 53
        To: 53
      Protocol: -1
      RuleAction: allow 
      RuleNumber: 1802
    Type: AWS::EC2::NetworkAclEntry   
  
  Egress1803:
    Properties: 
      CidrBlock: 10.38.9.237/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclApplication
      PortRange: 
        From: 636
        To: 636
      Protocol: 6
      RuleAction: allow 
      RuleNumber: 1803
    Type: AWS::EC2::NetworkAclEntry
   

Outputs:
  NaclApplication:
    Description: Export NACL ID of Application Subnet   
    Value: !Ref gpnaclApplication
    Export: 
      Name: {{prefix}}app-nacl