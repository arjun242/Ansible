##### History
# date  - initials - Description

AWSTemplateFormatVersion: '2010-09-09'
Description: CF Template to create NACL entries for gpnaclDatabase
Parameters: 

  UAI:
    Type: String
    Description: The UAI of the application being managed. UAI starting sequence. MUST be in lowercase.
    ConstraintDescription: The UAI must be valid, but specified as uai in lower case followed by 7 digits
    AllowedPattern: ^uai[0-9]*$
    MinLength: !!int 10
    MaxLength: !!int 10

  APPSubnetCIDR:
    Description: Complete Application subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range

  DBSubnetCIDR:
    Description: Complete Database subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range

  {% if extSubnetCIDR!= "NA" -%}
  EXTSubnetCIDR:
    Description: Complete External subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range
  {% endif %}

  {% if rbSubnetCIDR!= "NA" -%}
  RBSubnetCIDR:
    Description: Complete RB subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range
  {% endif %}

  {% if igrSubnetCIDR!= "NA" -%}
  IGRSubnetCIDR:
    Description: Complete Integration subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range
  {% endif %}

Resources:
  gpnaclDatabase:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
      - Key: Name
        Value: {{prefix}}gp-nacl-database
      - Key: app
        Value: gp-cloud-common
      - Key: uai
        Value: !Ref UAI
      VpcId: !ImportValue {{prefix}}vpcid

  # # Deny all inbound requests from Ext Subnet
  {% if extSubnetCIDR!= "NA" -%}
  Ingress100:
    Properties:
      CidrBlock: !Ref EXTSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclDatabase      
      Protocol: '-1'
      RuleAction: deny
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  {% endif %}

  #Allow DB connects from Application Subnets Az1 and Az2
  Ingress1000:
    Properties:
      CidrBlock: !Ref APPSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange:
        From: 1433
        To: 5432
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1000
    Type: AWS::EC2::NetworkAclEntry    

  {% if rbSubnetCIDR!= "NA" -%}
  # # Allow DB connects from ReachBack(RB) Subnets Az1 and Az2
  Ingress1100:
    Properties:
      CidrBlock: !Ref RBSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange:
        From: 1433
        To: 5432
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1100
    Type: AWS::EC2::NetworkAclEntry
  {% endif %}   

  {% if igrSubnetCIDR!= "NA" -%}
  # # Allow DB connects from Integration Subnets Az1 and Az2
  Ingress1150:
    Properties:
      CidrBlock: !Ref IGRSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange:
        From: 1433
        To: 5432
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1150
    Type: AWS::EC2::NetworkAclEntry
  {% endif %}   

  #Cross Zone Access DB Subnets Az1 and Az2 
  Ingress1400:
    Properties:
      CidrBlock: !Ref DBSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclDatabase
      Protocol: -1
      RuleAction: allow
      RuleNumber: 1400
    Type: AWS::EC2::NetworkAclEntry
  # Allow RDP Access 10.0.0.0/8
  Ingress1500:
    Properties:
      CidrBlock: 10.0.0.0/8
      Egress: false
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange:
        From: 3389
        To: 3389
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1500
    Type: AWS::EC2::NetworkAclEntry
  #Allow RDP Access 3.0.0.0/8
  Ingress1550:
    Properties:
      CidrBlock: 3.0.0.0/8
      Egress: false
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange:
        From: 3389
        To: 3389
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1550
    Type: AWS::EC2::NetworkAclEntry
  #Centralized Bastion SSH Access
  Ingress1551:
    Properties:
      CidrBlock: 10.157.136.0/25
      Egress: false
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1551
    Type: AWS::EC2::NetworkAclEntry
  #Centralized Bastion RDP Access
  Ingress1552:
    Properties:
      CidrBlock: 10.157.136.0/25
      Egress: false
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange:
        From: 3389
        To: 3389
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1552
    Type: AWS::EC2::NetworkAclEntry
  # Ephemeral ports allow responses to requests
  Ingress1600:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange:
        From: 32768
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1600
    Type: AWS::EC2::NetworkAclEntry
  # Allow RDP access from gp-ops account
  Ingress1700:
    Properties:
      CidrBlock: 10.157.136.0/25
      Egress: false
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange:
        From: 1433
        To: 5432
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1700
    Type: AWS::EC2::NetworkAclEntry
########## Out Bound Rules #############    

  {% if extSubnetCIDR!= "NA" -%}
  # # Deny all Outbound requests from Ext Subnet
  Egress100:
    Properties:
      CidrBlock: !Ref EXTSubnetCIDR
      Egress: true
      NetworkAclId:
        Ref: gpnaclDatabase      
      Protocol: '-1'
      RuleAction: deny
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  {% endif %}

  # Ephemeral ports allow responses to requests 10.0.0.0/8
  Egress1100:
    Properties:
      CidrBlock: 10.0.0.0/8
      Egress: true
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange:
        From: 32768
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1100
    Type: AWS::EC2::NetworkAclEntry
  # Ephemeral ports allow responses to requests 3.0.0.0/8
  Egress1150:
    Properties:
      CidrBlock: 3.0.0.0/8
      Egress: true
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange:
        From: 32768
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1150
    Type: AWS::EC2::NetworkAclEntry
  # Allow 443 Outbound to Internet 0.0.0.0/0
  Egress1200:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 1200
    Type: AWS::EC2::NetworkAclEntry
  #Cross Zone Access DB SUbnets Az1 and Az2
  Egress1300:
    Properties:
      CidrBlock: !Ref DBSubnetCIDR
      Egress: true
      NetworkAclId:
        Ref: gpnaclDatabase
      Protocol: -1
      RuleAction: allow
      RuleNumber: 1300
    Type: AWS::EC2::NetworkAclEntry

  #AD Domain Join Rules
  Egress1800:
    Properties: 
      CidrBlock: 10.93.58.179/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange: 
        From: 53
        To: 3269
      Protocol: 6
      RuleAction: allow 
      RuleNumber: 1800
    Type: AWS::EC2::NetworkAclEntry
  
  Egress1801:
    Properties: 
      CidrBlock: 10.93.58.179/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange: 
        From: 53
        To: 464
      Protocol: 17
      RuleAction: allow 
      RuleNumber: 1801
    Type: AWS::EC2::NetworkAclEntry
  
  Egress1802:
    Properties: 
      CidrBlock: 10.38.0.0/16
      Egress: true
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange: 
        From: 53
        To: 53
      Protocol: -1
      RuleAction: allow 
      RuleNumber: 1802
    Type: AWS::EC2::NetworkAclEntry   
  
  Egress1803:
    Properties: 
      CidrBlock: 10.38.9.237/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclDatabase
      PortRange: 
        From: 636
        To: 636
      Protocol: 6
      RuleAction: allow 
      RuleNumber: 1803
    Type: AWS::EC2::NetworkAclEntry 
  
Outputs:
  NaclDatabase:
    Description: Export NACL ID of Database Subnet 
    Value:
      Ref: gpnaclDatabase    
    Export: 
      Name: {{prefix}}db-nacl