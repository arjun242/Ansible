##### History
# date  - initials - Description

Parameters: 

  RBSubnetCIDR:
    Description: Complete RB subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range

  EXTSubnetCIDR:
    Description: Complete External subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range

  {% if igrSubnetCIDR!= "NA" -%}
  IGRSubnetCIDR:
    Description: Complete IGR subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range
  {% endif %}

  DBSubnetCIDR:
    Description: Complete DB subnets CIDR Az1 and Az2 
    Type: String
    AllowedPattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[0-9]|[1-2][0-9]|3[0-2]))?$
    ConstraintDescription: Must be a valid IP4 CIDR range

AWSTemplateFormatVersion: '2010-09-09'
Description: CF Template to create NACL entries for gp-nacl-rb
Resources:
  gpnaclRB:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
      - Key: Name
        Value: {{prefix}}gp-nacl-rb
      - Key: app
        Value: gp-cloud-common
      - Key: uai
        Value: uai3026350
      VpcId: !ImportValue {{prefix}}vpcid
  #Inbound 443 for ext subnet
  Ingress1000:
    Properties:
      CidrBlock: !Ref EXTSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1000'
    Type: AWS::EC2::NetworkAclEntry
  #Inbound 8443-8543 on ext subnet
  Ingress1001:
    Properties:
      CidrBlock: !Ref EXTSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '8443'
        To: '8543'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1001'
    Type: AWS::EC2::NetworkAclEntry    
  #Inbound ephemeral TCP ports - Response traffic initiated by nodes in this Subnet
  Ingress1002:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1002'
    Type: AWS::EC2::NetworkAclEntry
  
  #Inbound Empheral port UDP responses - Response traffic initiated by nodes in this subnet
  Ingress1005:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '32768'
        To: '65535'
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '1005'
    Type: AWS::EC2::NetworkAclEntry    

  #Allow RB subnets across AZs to communicate.
  Ingress1201:
    Properties:
      CidrBlock: !Ref RBSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclRB
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '1201'
    Type: AWS::EC2::NetworkAclEntry
  
  {% if igrSubnetCIDR!= "NA" -%}
  #Allow IGR subnets across AZs to communicate.
  Ingress1210:
    Properties:
      CidrBlock: !Ref IGRSubnetCIDR
      Egress: false
      NetworkAclId:
        Ref: gpnaclRB
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '1210'
    Type: AWS::EC2::NetworkAclEntry
  {% endif -%}


########## Out Bound Rules #############    

  # Outbound on port 80
  Egress1010:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1010'
    Type: AWS::EC2::NetworkAclEntry

  # Outbound on port 443
  Egress1011:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1011'
    Type: AWS::EC2::NetworkAclEntry
  
  # Outbound on SSH to Github
  Egress1030:
    Properties:
      CidrBlock: 10.229.19.0/24
      Egress: true
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '22'
        To: '22'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1030'
    Type: AWS::EC2::NetworkAclEntry

  # SMTP Mail relay
  Egress1040:
    Properties:
      CidrBlock: 3.159.213.48/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '25'
        To: '25'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1040'
    Type: AWS::EC2::NetworkAclEntry

  # SMTP Mail relay
  Egress1041:
    Properties:
      CidrBlock: 3.159.17.48/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '25'
        To: '25'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1041'
    Type: AWS::EC2::NetworkAclEntry

  # SMTP Mail relay
  Egress1042:
    Properties:
      CidrBlock: 10.38.9.235/32
      Egress: true
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '25'
        To: '25'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1042'
    Type: AWS::EC2::NetworkAclEntry

  # Outbound to DB
  Egress1062:
    Properties:
      CidrBlock: !Ref DBSubnetCIDR
      Egress: true
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '1433'
        To: '5432'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1062'
    Type: AWS::EC2::NetworkAclEntry

  # Outbound to EXT
  Egress1064:
    Properties:
      CidrBlock: !Ref EXTSubnetCIDR
      Egress: true
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1064'
    Type: AWS::EC2::NetworkAclEntry
     
  # Cross Zone Access - RB
  Egress1201:
    Properties:
      CidrBlock: !Ref RBSubnetCIDR
      Egress: true
      NetworkAclId:
        Ref: gpnaclRB
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '1201'
    Type: AWS::EC2::NetworkAclEntry  

  # ephemeral ports allow responses to requests
  Egress1300:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '32768'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '1300'
    Type: AWS::EC2::NetworkAclEntry  

  # ephemeral ports allow responses to requests
  Egress1310:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: gpnaclRB
      PortRange:
        From: '32768'
        To: '65535'
      Protocol: '17'
      RuleAction: allow
      RuleNumber: '1310'
    Type: AWS::EC2::NetworkAclEntry  

Outputs:
  NaclRB:
    Description: Export NACL ID of RB Subnet   
    Value:
      Ref: gpnaclRB
    Export: 
      Name: {{prefix}}rb-nacl