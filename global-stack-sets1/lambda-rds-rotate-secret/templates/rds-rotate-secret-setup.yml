---
AWSTemplateFormatVersion: '2010-09-09'
Description: Create IAM role, lambda function for RDS rotate secrets 

Mappings:
  Map:
    # gp-ops
    '325381443140':
      BaseRdsSg: ''
      SSMEndPointSg: ''
    # gp-power-us-east
    '538462866776':
      BaseRdsSg: 'sg-0bf498ea7da629624'
      SSMEndPointSg: 'sg-038869eed8323d357'
      WebInternetFacingSg: 'sg-09bd75ef84671675f'
      ImmutableLinuxSg: 'sg-04d05047e6dd26b05'
    # pp-steam-eu-west
    '372444449616':
      BaseRdsSg: ''
      SSMEndPointSg: ''
    # gp-us-east-gr
    '762713699569':
      BaseRdsSg: ''
      SSMEndPointSg: 'sg-09d98cca69a304d3d'

Parameters:

  RoleName:
    Type: String
    Default: "rds-rotate-secret-lambda"

  RolePath:
    Type: String
    Default: "/inf/"

  ModuleName:
    Type: String
    Default: "lambda_function"

  LambdaName:
    Description: Lambda Name
    Type: String
    Default: "ops-automation-rds-rotate-secret"

  LambdaCodeS3Bucket:
    Description: S3 bucket Name of lambda function
    Type: String
    Default: "gp-us-east-ops-automation-common-artifacts"

  LambdaCodeZipKey:
    Description: S3 bucket lambda function object zip key
    Type: String
    Default: "lambda/rds-rotate-secret.zip"

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      Path: !Ref RolePath
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
      - PolicyName: !Ref RoleName
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Sid: CloudWatchPermissions
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - logs:CreateExportTask
              - logs:DescribeExportTasks
            Resource: "*"

          - Sid: Ec2CreateNetworkInterfacePermission
            Effect: Allow
            Resource:
              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
            Action:
              - ec2:CreateNetworkInterfacePermission
            Condition:
              StringEquals:
                ec2:AuthorizedService: lambda.amazonaws.com

          - Sid: AllowToDeployToVPC
            Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DetachNetworkInterface
              - ec2:DeleteNetworkInterface
            Resource: "*"
          
          - Sid: AllowAccesstoSecretManager
            Effect: Allow
            Action:
              - secretsmanager:CreateSecret
              - secretsmanager:DeleteSecret
              - secretsmanager:DescribeSecret
              - secretsmanager:GetRandomPassword
              - secretsmanager:GetSecretValue
              - secretsmanager:GetResourcePolicy
              - secretsmanager:ListSecrets
              - secretsmanager:ListSecretVersionIds
              - secretsmanager:RestoreSecret
              - secretsmanager:RotateSecret
              - secretsmanager:TagResource
              - secretsmanager:UpdateSecret
              - secretsmanager:UpdateSecretVersionStage
              - secretsmanager:PutSecretValue
              - secretsmanager:PutResourcePolicy
            Resource: "*"

          - Sid: S3CommonBucketsAccess
            Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::gp-us-east-ops-automation-common*'

  LambdaFunction: 
    DependsOn: 
      - LambdaSecurityGroup
      - LambdaLogGroup
      - LambdaRole
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref LambdaName
      Description: "Rotate RDS Secret, Invoked by Secretsmanager"
      Handler: !Sub "${ModuleName}.handler"
      Role: !GetAtt LambdaRole.Arn
      Runtime: 'python3.7'
      Code: 
        S3Bucket: 'gp-us-east-ops-automation-common-artifacts'
        S3Key: !Ref LambdaCodeZipKey
      MemorySize: 128 
      Timeout: 300
      Environment: 
        Variables:
          SECRETS_MANAGER_ENDPOINT : !Sub "https://secretsmanager.${AWS::Region}.amazonaws.com"
      Tags:
      - Key: Name
        Value: !Ref LambdaName
      VpcConfig:
        SecurityGroupIds:
        - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
        - !ImportValue app-az1
        - !ImportValue app-az2

  LambdaLogGroup:
    DependsOn: StackSetResourceFunction
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaName}'
      RetentionInDays: 7

  InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'LambdaFunction.Arn'
      Action: lambda:InvokeFunction
      Principal: secretsmanager.amazonaws.com

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'SG for Lambda Function ${LambdaName}'
      GroupName: !Sub "${LambdaName}-lambda-SG"
      VpcId: !ImportValue vpcid
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${LambdaName}-lambda-SG"

Outputs:
  LambdaFunctionArn:
    Description: "Resource Arn of the Lambda function"
    Value: !GetAtt 'LambdaFunction.Arn'
    Export:
      Name: "RdsRotateSecretLambdaArn"

  LambdaRoleARN:
    Value: !GetAtt LambdaRole.Arn
    Description: "ARN for the lambda svc role"
    Export:
      Name: "RdsRotateSecretLambdaRoleArn"