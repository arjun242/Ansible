---
AWSTemplateFormatVersion: "2010-09-09"
Description: 'CldArchAdmin Federated or switch role for SA Team.
              Template ref: https://github.build.ge.com/gp-ops/global-stack-sets/blob/master/iam-cldsa-admin-setup/templates/iam-cldarch-role-setup.yml'

Parameters:

  RoleName:
    Type: String
    Description: Name of the  Role... e.g. 'cldSAAdmin'
    Default: 'cldarch'

  RolePath:
    Type: String
    Description: Path for the role
    Default: 'hq'

  TagEnv:
    Type: CommaDelimitedList
    Description: "List of all env ex: dev, qa, prd"
    Default: dev, qa, prd, stg, lab

  TagAssociate:
    Type: CommaDelimitedList
    Description: "List of all values ex: ops, sa, admin, app "
    Default: sa, app

  AdminAccountId:
    Type: String
    MaxLength: 12
    MinLength: 12
    Default: "325381443140"
    Description: 12 digit AWS Account Id of the identity/federation account containing the users to which you're granting access. This is a trusted account.
  
  MultiFactorAuthRequired:
    Default: "False"
    Type: String
    AllowedValues:
      - "True"
      - "False"

Conditions:
  AdminSetup: !Equals [!Ref AWS::AccountId, '325381443140']
  SwitchSetup: !Not [!Equals [!Ref AWS::AccountId, '325381443140']]
  
Resources:
  CldArchAdminRole:
    Type: AWS::IAM::Role
    Condition: AdminSetup
    Properties:
      RoleName: !Sub bu-pw-${RoleName}-fed
      Path: !Sub /${RolePath}/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - # Allow the role to be assumed from SAML Auth.
            Effect: Allow # Allow this role to be assumed by a federated entity
            Principal:
              Federated: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:saml-provider/ge-saml-for-aws-mfa
            Action:
              - sts:AssumeRoleWithSAML
            Condition:
              StringEquals:
                SAML:aud: 'https://signin.aws.amazon.com/saml'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/GP-Read-Only-Policy"
        - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/common-fed-role"
        - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/ssm-session-deny"
      Policies:
        - PolicyName: AssumeRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:

              - Sid: AssumeRolecldarch
                Action:
                  - sts:AssumeRole
                Resource:
                  - "arn:aws:iam::*:role/hq/bu-pw-cldarch-fed"
                Effect: Allow

  FedRole:
    Type: AWS::IAM::Role
    Condition: SwitchSetup
    Properties:
      RoleName: !Sub bu-pw-${RoleName}-fed
      Path: !Sub /${RolePath}/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - # Allow the role to be assumed from Admin account.
            Effect: Allow 
            Principal:
              "AWS": !Sub "arn:${AWS::Partition}:iam::${AdminAccountId}:role/hq/bu-pw-cldarch-fed"
            Action:
              - sts:AssumeRole
            Condition:
              Bool:
                "aws:MultiFactorAuthPresent": !Ref MultiFactorAuthRequired
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/GP-Read-Only-Policy"
        - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/common-fed-role"
        - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/ssm-session-deny"
        
  InfraPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub ${RoleName}-infra-access
      Roles:
        'Fn::If':
        - AdminSetup
        - 
          - !Ref CldArchAdminRole
        - 
          - !Ref FedRole
      PolicyDocument:
        Statement:

          - Sid: IamPassRole
            Effect: Allow
            Action:
              - iam:PassRole
            Resource:
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/app/*
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/inf/proton-role

          - Sid: ProtonCodeStarAccess
            Effect: Allow
            Action:
              - proton:CreateEnvironment
              - proton:CreateService
              - proton:UpdateEnvironment
              - proton:DeleteEnvironment
              - proton:UpdateService
              - proton:DeleteService
              - proton:Get*
              - proton:List*
              - codestar-connections:PassConnection
              - codestar-connections:ListConnections
            Resource:
              - "*"   

          - Sid: Ec2ResourceTagAccess
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*    # Ec2 Instance
              - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*    # Ec2 snapshot
            Action:
              - ec2:StopInstances
              - ec2:StartInstances
              - ec2:RebootInstances
              - ec2:TerminateInstances
              - ec2:DeleteSnapshot
            Condition: 
              ForAnyValue:StringEquals:
                ec2:ResourceTag/associate: !Ref TagAssociate

          - Sid: AwsRequestTagAccess
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*    # Ec2 Instance
              - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:volume/*    # Ec2 Volume
              - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*    # Ec2 snapshot
            Action:
              - ec2:RunInstances
              - ec2:CreateSnapshots
              - ec2:CreateSnapshot
            Condition: 
              ForAnyValue:StringEquals:
                aws:RequestTag/associate: !Ref TagAssociate

          - Sid: Ec2CreateRequestTagAccess
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}::snapshot/*    # Ec2 snapshot
            Action:
              - ec2:CreateTags
            Condition: 
              ForAnyValue:StringEquals:
                aws:RequestTag/associate: !Ref TagAssociate

          # S3Full access on buckets starting with the uai value.
          - Sid: S3Acess
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::uai*"
            Action:
              - s3:*

          - Sid: S3CommonBucketsAccess # resource taging is not accepted
            Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::gp-us-east-ops-automation-common*'

          - Sid: UnconstrainedAccess
            Effect: Allow
            Action:
              - support:*
              - cloudformation:CreateUploadBucket
              - cloudwatch:DeleteAlarms
              - cloudwatch:PutMetricAlarm
              - cloudwatch:PutDashboard
              - cloudwatch:PutMetricData
              - cloudwatch:TagResource
              - logs:FilterLogEvents #logs
              - logs:Get*
              - logs:List*
              - logs:StartQuery
              - logs:StopQuery
              - logs:GetLogDelivery
              - logs:UpdateLogDelivery
              - logs:TestMetricFilter
              - events:DeleteRule #events
              - events:PutRule
              - events:PutTargets
              - events:RemoveTargets
              - elasticache:List*
              - elasticache:RebootCacheCluster
              - waf-regional:Get*  #waf-regional
              - waf-regional:List*
              - cognito-identity:Describe*  #cognito-identity
              - cognito-identity:List*
              - cognito-identity:Get*
              - cognito-idp:Describe*
              - cognito-idp:AdminGet*
              - cognito-idp:AdminList*
              - cognito-idp:List*
              - cognito-idp:Get*
              - cognito-sync:Describe*
              - cognito-sync:Get*
              - cognito-sync:List*
              - cloudfront:Get*  #cloudfront
              - cloudfront:List*
              - cloudfront:CreateInvalidation
              - cloudfront:UpdateDistribution
              - route53:CreateTrafficPolicy  #route53
              - route53:CreateTrafficPolicyInstance
              - route53:CreateTrafficPolicyVersion
              - route53:DeleteTrafficPolicy
              - route53:DeleteTrafficPolicyInstance
            Resource:
              - "*"

          # Condition to delete stacks with prefix uaivalue-env .
          - Sid: ConstrainedConditionalAccess
            Effect: Allow
            Action:
              - cloudformation:DeleteStack
              - cloudformation:DeleteStackInstances
              - cloudformation:Get*
              # - cloudformation:List*
              - cloudformation:DetectStackDrift
              - cloudformation:DetectStackResourceDrift
              - cloudformation:SignalResource
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/uai*"
              # - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:snapshot:*"  # RDS DB snapshot

  MicroServicesPolicy:
  # Containes access for ECR, ECS, Lambda, SQS
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub ${RoleName}-microservices-access
      Roles:
        'Fn::If':
        - AdminSetup
        - 
          - !Ref CldArchAdminRole
        - 
          - !Ref FedRole
      PolicyDocument:
        Statement:
        
          - Sid: UnconstrainedMisAccess
            Effect: Allow
            Action:
              - chatbot:*
              - iot:*
              - codebuild:BatchGet*
              - codebuild:GetResourcePolicy
              - codebuild:List*
              - codebuild:DescribeTestCases
              - ecs:RegisterTaskDefinition
              - ecs:DeregisterTaskDefinition
              - appmesh:ListVirtualNodes
              - appmesh:DescribeVirtualNode
              - ecr:GetAuthorizationToken
              - mq:Describe*
              - mq:List*
              - sns:List* #sns
              - sns:Get*
              - iotevents:Describe* #iot
              - iotevents:List*
              - iot:ValidateSecurityProfileBehaviors
              - iot:TestAuthorization
              - iot:TestInvokeAuthorizer
              - iot:SearchIndex
              - apigateway:GET  # apigateway
              - apigateway:POST
              - apigateway:PATCH
              - apigateway:UpdateRestApiPolicy
              - execute-api:* 
              - greengrass:Get*  # greengrasss
              - greengrass:Discover
              - greengrass:StartBulkDeployment
              - greengrass:StopBulkDeployment
              - greengrass:ResetDeployments
              - states:Desc* #states
              - states:Get*
              - states:List*
              - es:Desc*  #es
              - es:Get*
              - es:List*
              - codepipeline:Get*
              - codepipeline:List*
            Resource:
              - '*'

          # Create is explicitly added in PermissionBoundaries.
          - Sid: ECRconstrainedFullAccess
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/uai*"
            Action:
              - ecr:*

          # fix the policy on base repo 
          - Sid: ECRconstrainedAccessBase
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:ecr:${AWS::Region}:325381443140:repository/gp-ops-base-cis*" # base repo name in ops account
            Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage

          # required access only to manage the services, tasks and Task Definations.
          # Does not provide any access to create or delete.
          - Sid: 'EcsConstrainedFullAccess'
            Effect: Allow
            Resource: 
              - "*"
            Action:
              - ecs:*
            Condition:
              ArnEquals:
                ecs:cluster: !Sub "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/uai*"

          - Sid: LambdaConstrainedAccess
            Effect: Allow
            Action:
              - lambda:CreateEventSourceMapping
              - lambda:UpdateEventSourceMapping
              - lambda:GetEventSourceMapping
              - lambda:DeleteEventSourceMapping
            Resource:
              - '*'
            Condition:
              ArnEquals:
                lambda:FunctionArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:uai*"

          - Sid: LambdaConstrained
            Effect: Allow
            Action:
              - lambda:Get*
              - lambda:InvokeFunction
              - lambda:InvokeAsync
              - lambda:Update*
            Resource:
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:uai*"

  SSMandSecretPolicy:
  # Containes access for ssm, SecretMangaer
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub ${RoleName}-ssm-secret-access
      Roles:
        'Fn::If':
        - AdminSetup
        - 
          - !Ref CldArchAdminRole
        - 
          - !Ref FedRole
      PolicyDocument:
        Statement:
          - Sid: UnConstrainedAccess
            Effect: Allow
            Resource:
              - '*'
            Action:
              - ssm:GetConnectionStatus
              - ssm:TerminateSession
              - secretsmanager:CreateSecret
              - ssm:SendAutomationSignal              

          - Sid: ConstrainedFullAccess
            Effect: Allow
            Action:
              - ssm:*
              - secretsmanager:*
            Resource:
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/uai* # SSM Parameters
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/uai*  # SSM Documents
              - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:uai*" # Secretsmanager

          # required review to include in fed role
          - Sid: SSMConstrainedCreate
            Effect: Allow
            Action:
              - ssm:CreateDocument
              - ssm:AddTagsToResource
            Resource:
              - '*'
            Condition:
              StringEquals:
                aws:RequestTag/env: !Ref TagEnv
                aws:RequestTag/associate: !Ref TagAssociate

          - Sid: SSMStartSessionAccessInstance
            Effect: Allow
            Action:
              - ssm:StartSession
              - ssm:SendCommand
            Resource:
              - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
            Condition:
              ForAnyValue:StringEquals:
                ssm:resourceTag/env: !Ref TagEnv
                ssm:resourceTag/associate: !Ref TagAssociate

          # this is required by Fed roles only with mfa Access to connect to Instance 
          # Access to run port forwarding Session document works with above access restrict to run on instance
          - Sid: SSMStartSessionAccessDoc # Cannot constrain on resource or tag
            Effect: Allow
            Action:
              - ssm:StartSession
              - ssm:SendCommand
            Resource:
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/app*
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-StartPortForwardingSession # aws managed document
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-StartSSHSession  # aws managed document
              - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-RunPowerShellScript  # aws managed document

  FedRolePolicyDelete:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${RoleName}-Modify'
      Roles:
        'Fn::If':
        - AdminSetup
        - 
          - !Ref CldArchAdminRole
        - 
          - !Ref FedRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DeleteFullAccess
            Effect: Allow
            Action:
              - servicediscovery:DeleteNamespace
              - servicediscovery:DeleteService
              - ec2:RevokeSecurityGroup* #Ingress and Egress
              - ec2:DeleteNetworkInterface
              - ec2:DeleteNetworkInterfacePermission
              # - ec2:DeleteTags
              - ec2:DeleteSecurityGroup
              - ec2:DeleteLaunchTemplate
              - ec2:DeleteLaunchTemplateVersions
              - ec2:AuthorizeSecurityGroupEgress
              - ec2:DeleteVolume
              - rds:DeleteDBSecurityGroup
              - elasticache:DeleteCacheSecurityGroup
              - elasticache:RevokeCacheSecurityGroupIngress
              - elasticache:DeleteCacheCluster
              - autoscaling:DeleteLaunchConfiguration
              - apigateway:Delete
              - application-autoscaling:DeregisterScalableTarget
              - application-autoscaling:DeleteScalingPolicy
            Resource:
            - '*'

          - Sid: DeleteConditionalAccess
            Effect: Allow
            Action:
              - cloudformation:Delete*
              - logs:Delete*
              - ecr:Delete*
              - ecs:Delete*
              - kms:Delete*
              - rds:Delete*
              - lambda:Delete*
              - secretsmanager:Delete*
              - ssm:Delete*
              - sqs:Delete*
              - sns:Delete*
              - elasticloadbalancing:Delete*
              - elasticloadbalancing:Modify*
              - elasticloadbalancing:Remove*
              - greengrass:Delete*
            Resource:
              - !Sub "arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:*uai*"  # ELB
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/uai*" # Cloudformation
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*uai*"  # logs
              - !Sub "arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/uai*"  #ecr
              - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:uai*"  #lambda Function
              - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:uai*"   #lambda Function Layer
              - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/uai*"  # Kms Key Alias 
              - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*"  
              - !Sub "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:uai*"  # sqs
              - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:uai*"  # sns
              - !Sub "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:cluster/uai*"  # ecs
              - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/uai*"   # SSM Parameter
              - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/uai*"    # SSM Document
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:uai*"  # RDS Cluster
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:db:*"  # RDS DB Instance
              - !Sub "arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:snapshot:uai*"  # RDS DB snapshot
              - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:uai*"  # SecretsManager
              - !Sub "arn:${AWS::Partition}:greengrass:${AWS::Region}:${AWS::AccountId}:/greengrass/*"  # GreenGrass
                     
              
  FedRolePolicyServicecatalogAccess:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${RoleName}-SC'
      Roles:
        'Fn::If':
        - AdminSetup
        - 
          - !Ref CldArchAdminRole
        - 
          - !Ref FedRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: CloudFormationAccess
            Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
              - cloudformation:UpdateStack
              - cloudformation:TagResource
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/SC-*"
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/SC-*"
          -
            Effect: Allow
            Action:
              - cloudformation:ExecuteChangeSet
              - cloudformation:DescribeChangeSet
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/uai*"
          - 
            Effect: Allow
            Action:
              - cloudformation:GetTemplateSummary
              - servicecatalog:Describe*
              - servicecatalog:List*
              - servicecatalog:SearchProducts
              - servicecatalog:ProvisionProduct
              - ssm:GetAutomationExecution
              - config:DescribeConfigurationRecorders
              - config:DescribeConfigurationRecorderStatus
              - s3:GetObject
            Resource:
              - "*"
          - 
            Effect: Allow
            Action:
              - servicecatalog:DescribeProvisionedProduct
              - servicecatalog:DescribeRecord
              - servicecatalog:ListRecordHistory
              - servicecatalog:ListStackInstancesForProvisionedProduct
              - servicecatalog:ScanProvisionedProducts
              - servicecatalog:TerminateProvisionedProduct
              - servicecatalog:UpdateProvisionedProduct
              - servicecatalog:SearchProvisionedProducts
              - servicecatalog:ListServiceActionsForProvisioningArtifact
              - servicecatalog:ExecuteProvisionedProductServiceAction
              - servicecatalog:DescribeServiceActionExecutionParameters
            Resource:
            - "*"
            Condition:
              StringEquals:
                servicecatalog:userLevel: self
Outputs:
  
  AdminCldArchFederatedRoleName:
    Condition: AdminSetup
    Value: !Ref CldArchAdminRole
  AdminCldArchFederatedRoleArn:
    Condition: AdminSetup
    Value: !GetAtt CldArchAdminRole.Arn
  SwitchCldArchFederatedRoleName:
    Condition: SwitchSetup
    Value: !Ref FedRole
  SwitchCldArchFederatedRoleArn:
    Condition: SwitchSetup
    Value: !GetAtt FedRole.Arn